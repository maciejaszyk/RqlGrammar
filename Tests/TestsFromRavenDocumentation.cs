using Antlr4.Runtime;
using RqlGrammar;
using Xunit;

namespace Tests
{
    public class TestsFromRavenDocumentation
    {
        [Theory]
        [InlineData("declare function output(e) {  	var format = function(p){ return p.FirstName + \" \" + p.LastName; };  	return { FullName : format(e) };  }  from Employees as e select output(e)")]
        [InlineData("declare function output(e) {  	var format = function(p){ return p.FirstName + \" \" + p.LastName; };  	return { FullName : format(e) };  }  from index 'Employees/ByFirstAndLastName' as e select output(e)")]
        [InlineData("from 'Product/Sales'")]
        [InlineData("from 'Products/Average/ByCategory'  where Category == 'Seafood'")]
        [InlineData("from 'Products/ByCategory'  where Category == 'Seafood'")]
        [InlineData("from Companies   where lucene(Name, 'bistro')")]
        [InlineData("from Companies   where lucene(name, 'bistro')")]
        [InlineData("from Companies  select Name, Address.City as City, Address.Country as Country")]
        [InlineData("from Employees  where FirstName = 'Robert' and LastName = 'King'")]
        [InlineData("from Employees  where FirstName = 'Robert'")]
        [InlineData("from Employees  where firstName = 'Robert'")]
        [InlineData("from Employees  where id() = 'employees/1-A'")]
        [InlineData("from Employees  where id() == 'employees/1-A'")]
        [InlineData("from Employees as e   select {       DayOfBirth : new Date(Date.parse(e.Birthday)).getDate(),       MonthOfBirth : new Date(Date.parse(e.Birthday)).getMonth() + 1,      Age : new Date().getFullYear() - new Date(Date.parse(e.Birthday)).getFullYear()   }")]
        [InlineData("from Employees as e   select {       Name : e.FirstName,        Metadata : getMetadata(e)  }")]
        [InlineData("from Employees as e   select {      Date : new Date(Date.parse(e.Birthday)),       Name : e.FirstName.substr(0,3)  }")]
        [InlineData("from Employees as e  select {      FullName : e.FirstName + \" \" + e.LastName  }")]
        [InlineData("from Employees as e  select {      fullName : e.FirstName + \" \" + e.LastName  }")]
        [InlineData("from Employees where exact(FirstName == 'Robert')")]
        [InlineData("from Employees")]
        [InlineData("from Events  where spatial.within(spatial.point(Latitude, Longitude), spatial.circle(500, 30, 30))")]
        [InlineData("from Events  where spatial.within(spatial.point(Latitude, Longitude), spatial.wkt('Circle(30 30 d=500.0000)'))")]
        [InlineData("from Events  where spatial.within(spatial.point(latitude, longitude), spatial.circle(500, 30, 30))")]
        [InlineData("from Events  where spatial.within(spatial.point(latitude, longitude), spatial.wkt('Circle(30 30 d=500.0000)'))")]
        [InlineData("from Houses  where spatial.within(spatial.point(Latitude, Longitude), spatial.circle(10, 32.1234, 23.4321))  order by spatial.distance(spatial.point(Latitude, Longitude), spatial.point(32.1234, 23.4321)) desc")]
        [InlineData("from Houses  where spatial.within(spatial.point(Latitude, Longitude), spatial.circle(10, 32.1234, 23.4321))  order by spatial.distance(spatial.point(Latitude, Longitude), spatial.point(32.1234, 23.4321))")]
        [InlineData("from Houses  where spatial.within(spatial.point(Latitude, Longitude), spatial.circle(10, 32.1234, 23.4321))")]
        [InlineData("from Houses  where spatial.within(spatial.point(Latitude, Longitude), spatial.wkt('Circle(32.1234, 23.4321 d=10.0000)'))")]
        [InlineData("from Houses  where spatial.within(spatial.point(latitude, longitude), spatial.circle(10, 32.1234, 23.4321))  order by spatial.distance(spatial.point(latitude, longitude), spatial.point(32.1234, 23.4321)) desc")]
        [InlineData("from Houses  where spatial.within(spatial.point(latitude, longitude), spatial.circle(10, 32.1234, 23.4321))  order by spatial.distance(spatial.point(latitude, longitude), spatial.point(32.1234, 23.4321))")]
        [InlineData("from Houses  where spatial.within(spatial.point(latitude, longitude), spatial.circle(10, 32.1234, 23.4321))")]
        [InlineData("from Houses  where spatial.within(spatial.point(latitude, longitude), spatial.wkt('Circle(32.1234 23.4321 d=10.0000)'))")]
        [InlineData("from Orders   group by Employee   order by count() as long   select Employee, count()")]
        [InlineData("from Orders   group by Employee   order by sum(Freight) as double   select key() as Employee, sum(Freight) as Sum")]
        [InlineData("from Orders   group by Employee, Company  select key() as EmployeeCompanyPair, count() as Count")]
        [InlineData("from Orders   group by Employee, Company  select key() as EmployeeCompanyPair, count()")]
        [InlineData("from Orders   group by Lines[].Product  select Lines[].Product, count() as Count")]
        [InlineData("from Orders   group by Lines[].Product  select Lines[].Product, count()")]
        [InlineData("from Orders   group by Lines[].Product, Lines[].Quantity   select Lines[].Product as Product, Lines[].Quantity as Quantity, count() as Count")]
        [InlineData("from Orders   group by Lines[].Product, Lines[].Quantity   select Lines[].Product as Product, Lines[].Quantity as Quantity, count()")]
        [InlineData("from Orders   group by Lines[].Product, ShipTo.Country   select Lines[].Product as Product, ShipTo.Country as Country, count() as Count")]
        [InlineData("from Orders   group by Lines[].Product, ShipTo.Country   select Lines[].Product as Product, ShipTo.Country as Country, count()")]
        [InlineData("from Orders   group by array(Lines[].Product), ShipTo.Country   select Lines[].Product as Products, ShipTo.Country as Country, count() as Count")]
        [InlineData("from Orders   group by array(Lines[].Product), ShipTo.Country   select Lines[].Product as Products, ShipTo.Country as Country, count()")]
        [InlineData("from Orders   group by array(Lines[].Product), array(Lines[].Quantity)   select Lines[].Product as Products, Lines[].Quantity as Quantities, count() as Count")]
        [InlineData("from Orders   group by array(Lines[].Product), array(Lines[].Quantity)   select Lines[].Product as Products, Lines[].Quantity as Quantities, count()")]
        [InlineData("from Orders   select distinct ShipTo.Country ")]
        [InlineData("from Orders   where exact(Lines[].ProductName == 'Singaporean Hokkien Fried Mee')")]
        [InlineData("from Orders  group by Employee, Company  select Employee as EmployeeIdentifier, Company, count() as Count")]
        [InlineData("from Orders  group by Employee, Company  select Employee as EmployeeIdentifier, Company, count()")]
        [InlineData("from Orders  group by ShipTo.City  select ShipTo.City as Country, sum(Lines[].Quantity) as TotalQuantity")]
        [InlineData("from Orders  group by array(Lines[].Product)  select key() as Products, count() as Count")]
        [InlineData("from Orders  group by array(Lines[].Product)  select key() as Products, count()")]
        [InlineData("from Orders  select ShipTo, Lines[].ProductName as Products")]
        [InlineData("from Orders  where ShipTo.City = 'Albuquerque'")]
        [InlineData("from Orders  where TotalPrice > 100  include CustomerId")]
        [InlineData("from Orders as o   load o.Company as c   select   {       CompanyName : c.Name,       ShippedAt : o.ShippedAt,       TotalProducts : o.Lines.length,       TotalDiscountedProducts : o.Lines.filter(x => x.Discount > 0 ).length   }")]
        [InlineData("from Orders as o  load o.Company as c  select {  	CompanyName: c.Name,  	ShippedAt: o.ShippedAt  }")]
        [InlineData("from Orders as o  select {      Total : o.Lines.reduce(          (acc , l) => acc += l.PricePerUnit * l.Quantity, 0)  }")]
        [InlineData("from People u where id(u) in ('people/1-A', 'people/3-A')")]
        [InlineData("from People where Name = 'Bob' and Age >= 29")]
        [InlineData("from Products   where endsWith(Name, 'ra')")]
        [InlineData("from Products   where regex(Name, '^[NA]')")]
        [InlineData("from Products   where regex(name, '^[NA]')")]
        [InlineData("from Products   where startsWith(Name, 'ch')")]
        [InlineData("from Products  where UnitsInStock > 5  select Name")]
        [InlineData("from Users   where search(Name, 'a*')")]
        [InlineData("from Users   where search(name, 'a*')")]
        [InlineData("from Users  where boost(search(Hobbies, 'I love sport'), 10) or boost(search(Hobbies, 'but also like reading books'), 5)")]
        [InlineData("from Users  where boost(search(hobbies, 'I love sport'), 10) or boost(search(hobbies, 'but also like reading books'), 5)")]
        [InlineData("from Users  where boost(startsWith(Name, 'G'), 10) or boost(startsWith(Name, 'A'), 5)")]
        [InlineData("from Users  where search(Name, '*oh* *da*')")]
        [InlineData("from Users  where search(Name, 'Adam') or search(Hobbies, 'sport')")]
        [InlineData("from Users  where search(Name, 'Jo* Ad*')")]
        [InlineData("from Users  where search(Name, 'John Adam')")]
        [InlineData("from Users  where search(Name, 'looking for someone who likes sport books computers')")]
        [InlineData("from Users  where search(name, '*oh* *da*')")]
        [InlineData("from Users  where search(name, 'Adam') or search(hobbies, 'sport')")]
        [InlineData("from Users  where search(name, 'Jo* Ad*')")]
        [InlineData("from Users  where search(name, 'John Adam')")]
        [InlineData("from Users  where search(name, 'looking for someone who likes sport books computers')")]
        [InlineData("from Users as s where id() == cmpxchg(\"emails/ayende@ayende.com\")  ")]
        [InlineData("from index 'Animals/ByName'  where Name = 'Mitzy'")]
        [InlineData("from index 'Animals/ByName'  where name = 'Mitzy'")]
        [InlineData("from index 'Articles/ByArticleBody'   where morelikethis(id() = 'articles/1')")]
        [InlineData("from index 'Articles/ByArticleBody'   where morelikethis(id() = 'articles/1', '{ \"Fields\" : [ \"ArticleBody\" ] }')")]
        [InlineData("from index 'Articles/ByArticleBody'   where morelikethis(id() = 'articles/1', '{ \"Fields\" : [ \"articleBody\" ] }')")]
        [InlineData("from index 'Articles/MoreLikeThis'   where morelikethis(id() = 'articles/1', '{ \"Fields\" : [ \"Body\" ] }') and Category == 'IT'")]
        [InlineData("from index 'Articles/MoreLikeThis'   where morelikethis(id() = 'articles/1', '{ \"Fields\" : [ \"Body\" ] }')")]
        [InlineData("from index 'Articles/MoreLikeThis'   where morelikethis(id() = 'articles/1', '{ \"Fields\" : [ \"body\" ] }') and category == 'IT'")]
        [InlineData("from index 'Articles/MoreLikeThis'   where morelikethis(id() = 'articles/1', '{ \"Fields\" : [ \"body\" ] }')")]
        [InlineData("from index 'BlogPosts/ByTags'  where Tags ALL IN ('Development', 'Research')")]
        [InlineData("from index 'BlogPosts/ByTags'  where Tags IN ('Development', 'Research')")]
        [InlineData("from index 'BlogPosts/ByTags'  where tags ALL IN ('Development', 'Research')")]
        [InlineData("from index 'BlogPosts/ByTags'  where tags IN ('Development', 'Research')")]
        [InlineData("from index 'Camera/Costs'   select   facet(Manufacturer),   facet(Cost < 200, Cost >= 200 AND Cost < 400, Cost >= 400 AND Cost < 600, Cost >= 600 AND Cost < 800, Cost >= 800),  facet(Megapixels < 3, Megapixels >= 3 AND Megapixels < 7, Megapixels >= 7 AND Megapixels < 10, Megapixels >= 10)")]
        [InlineData("from index 'Camera/Costs'   select   facet(manufacturer),   facet(cost < 200, cost >= 200 AND cost < 400, cost >= 400 AND cost < 600, cost >= 600 AND cost < 800, cost >= 800),  facet(megapixels < 3, megapixels >= 3 AND megapixels < 7, megapixels >= 7 AND megapixels < 10, megapixels >= 10)")]
        [InlineData("from index 'Camera/Costs'   select   facet(manufacturer),   facet(cost < 200, cost >= 200 and cost < 400, cost >= 400 and cost < 600, cost >= 600 and cost < 800, cost >= 800),  facet(megapixels < 3, megapixels >= 3 AND megapixels < 7, megapixels >= 7 AND megapixels < 10, megapixels >= 10)")]
        [InlineData("from index 'Camera/Costs'   select facet(id('facets/CameraFacets'))")]
        [InlineData("from index 'Cameras/ByManufacturerModelCostDateOfListingAndMegapixels'   where Cost between 100 and 300  select facet(Manufacturer), facet(Cost <= 200, Cost between 200 and 400, Cost between 400 and 600, Cost between 600 and 800, Cost >= 800), facet(Megapixels <= 3, Megapixels between 3 and 7, Megapixels between 7 and 10, Megapixels >= 10)")]
        [InlineData("from index 'Cameras/ByManufacturerModelCostDateOfListingAndMegapixels'   where Cost between 100 and 300  select facet(id('facets/CameraFacets'))")]
        [InlineData("from index 'Cameras/ByManufacturerModelCostDateOfListingAndMegapixels'   where cost between 100 and 300  select facet(id('facets/CameraFacets'))")]
        [InlineData("from index 'Cameras/ByManufacturerModelCostDateOfListingAndMegapixels'   where cost between 100 and 300  select facet(manufacturer), facet(cost <= 200, cost between 200 and 400, cost between 400 and 600, cost between 600 and 800, cost >= 800), facet(megapixels <= 3, megapixels between 3 and 7, megapixels between 7 and 10, megapixels >= 10)")]
        [InlineData("from index 'Companies/ByContact'   select Name, Phone")]
        [InlineData("from index 'Companies/ByContact'  select Name, Phone")]
        [InlineData("from index 'Employees/ByBirthday '  where Birthday between '1963-01-01' and '1963-12-31T23:59:59.9990000'")]
        [InlineData("from index 'Employees/ByCountry'  where Country = 'USA'")]
        [InlineData("from index 'Employees/ByFirstAndLastName'  select FirstName, LastName")]
        [InlineData("from index 'Employees/ByFirstAndLastName'  where FirstName = 'Robert' and LastName = 'King'")]
        [InlineData("from index 'Employees/ByFirstAndLastName'  where FirstName = 'Robert'")]
        [InlineData("from index 'Employees/ByFirstAndLastName'  where FirstName IN ('Robert', 'Nancy')")]
        [InlineData("from index 'Employees/ByFirstAndLastName' as e   select {       Name : e.FirstName,        Metadata : getMetadata(e)  }")]
        [InlineData("from index 'Employees/ByFirstAndLastName' as e  select   {       FullName : e.FirstName + \" \" + e.LastName   }")]
        [InlineData("from index 'Employees/ByFirstAndLastNameWithStoredFields'  select FirstName, LastName")]
        [InlineData("from index 'Employees/ByFirstName'   where FirstName = 'Robert'")]
        [InlineData("from index 'Employees/ByFirstName'  where FirstName = 'Robert'")]
        [InlineData("from index 'Employees/ByFirstNameAndBirthday' as e   select {       DayOfBirth : new Date(Date.parse(e.Birthday)).getDate(),       MonthOfBirth : new Date(Date.parse(e.Birthday)).getMonth() + 1,      Age : new Date().getFullYear() - new Date(Date.parse(e.Birthday)).getFullYear()   }")]
        [InlineData("from index 'Employees/ByFirstNameAndBirthday' as e   select {      Date : new Date(Date.parse(e.Birthday)),       Name : e.FirstName.substr(0,3)  }")]
        [InlineData("from index 'Employees/ByFullName'   select suggest('FullName', 'johne')")]
        [InlineData("from index 'Employees/ByFullName'   select suggest('FullName', 'johne', '{ \"Accuracy\" : 0.4, \"PageSize\" : 5, \"Distance\" : \"JaroWinkler\", \"SortMode\" : \"Popularity\" }')")]
        [InlineData("from index 'Employees/ByFullName'  where FullName = 'Robert King'")]
        [InlineData("from index 'Employees/ByYearOfBirth'  where YearOfBirth = 1963")]
        [InlineData("from index 'Employees/Query'  where search(Query, 'John Doe')")]
        [InlineData("from index 'Events/ByCoordinates'  where spatial.within(Coordinates, spatial.circle(500, 30, 30))")]
        [InlineData("from index 'Events/ByCoordinates'  where spatial.within(coordinates, spatial.circle(500, 30, 30))")]
        [InlineData("from index 'Order/ByOrderLinesCount'  where Lines.Count > 50")]
        [InlineData("from index 'Order/ByOrderLinesCount'  where Lines_ProductName = 'Teatime Chocolate Biscuits'")]
        [InlineData("from index 'Orders/ByShipToAndLines' as o  select   {       ShipTo: o.ShipTo,       Products : o.Lines.map(function(y){return y.ProductName;})   }")]
        [InlineData("from index 'Orders/ByShipToAndLines' as o  select {      Total : o.Lines.reduce(          (acc , l) => acc += l.PricePerUnit * l.Quantity, 0)  }")]
        [InlineData("from index 'Orders/ByShippedAtAndCompany' as o  load o.Company as c  select {  	CompanyName: c.Name,  	ShippedAt: o.ShippedAt  }")]
        [InlineData("from index 'Person/ByName' where Age < 35")]
        [InlineData("from index 'Person/ByName' where Name = 'Bob' ")]
        [InlineData("from index 'Products/ByName'   select suggest('Name', 'chaig')")]
        [InlineData("from index 'Products/ByName/Search'   where search(Name, 'Louisiana')  order by NameForSorting desc")]
        [InlineData("from index 'Products/ByUnitsInStock '   where UnitsInStock > 10  order by Name as alphanumeric")]
        [InlineData("from index 'Products/ByUnitsInStock'   where UnitsInStock > 10  order by UnitsInStock as long desc")]
        [InlineData("from index 'Products/ByUnitsInStock'   where UnitsInStock > 10  order by UnitsInStock desc")]
        [InlineData("from index 'Products/ByUnitsInStock'   where UnitsInStock > 10  order by random()")]
        [InlineData("from index 'Products/ByUnitsInStock'   where UnitsInStock > 10  order by score()")]
        [InlineData("from index 'Products/ByUnitsInStock'   where UnitsInStock > 10")]
        [InlineData("from index 'Products/ByUnitsInStock'  where UnitsInStock > 50")]
        [InlineData("from index 'Products/ByUnitsInStockAndName'   where UnitsInStock > 10  order by UnitsInStock, score(), Name desc")]
        [InlineData("from index 'TShirts/ByManufacturerColorSizeAndReleaseYear'   where intersect(Manufacturer = 'Raven', Color = 'Blue' and Size = 'Small', Color = 'Gray' and Size = 'Large') ")]
        [InlineData("from index 'TShirts/ByManufacturerColorSizeAndReleaseYear'   where intersect(Manufacturer = 'Raven', Color = 'Blue' and Size = 'Small', Color = 'Gray' and Size = 'Large')")]
        [InlineData("from index 'TShirts/ByManufacturerColorSizeAndReleaseYear'   where intersect(manufacturer = 'Raven', color = 'Blue' and size = 'Small', color = 'Gray' and size = 'Large') ")]
        [InlineData("from index 'TShirts/ByManufacturerColorSizeAndReleaseYear'   where intersect(manufacturer = 'Raven', color = 'Blue' and size = 'Small', color = 'Gray' and size = 'Large')")]
        [InlineData("from index 'Users/ByHobbies'   where boost(search(Hobbies, 'I love sport'), 10) or boost(search(Hobbies, 'but also like reading books'), 5)")]
        [InlineData("from index 'Users/ByHobbies'   where boost(search(hobbies, 'I love sport'), 10) or boost(search(hobbies, 'but also like reading books'), 5)")]
        [InlineData("from index 'Users/ByName'  where search(Name, 'John')")]
        [InlineData("from index 'Users/ByName'  where search(name, 'John')")]
        [InlineData("from index 'Users/ByNameAndHobbies'   where search(Name, 'Adam') or search(Hobbies, 'sport')")]
        [InlineData("from index 'Users/Search'  where search(Query, 'John')")]
        [InlineData("from index 'Users/Search'  where search(query, 'John')")]
        [InlineData("from index 'Users/ByNameAndHobbies'   where search(name, 'Adam') or search(hobbies, 'sport')")]

        public void ExamplesFromDocs(string input)
        {
            var result = Act(input);
            AssertNoErrors(result);
        }

        private RqlParser Act(string input)
        {
            var lexer = new RqlLexer(new AntlrInputStream(input));
            var parser = new RqlParser(new CommonTokenStream(lexer));
            parser.prog();

            return parser;
        }

        private static void AssertNoErrors(RqlParser result)
        {
            Assert.Equal(0, result.NumberOfSyntaxErrors);
        }
        private static void AssertWithErrors(RqlParser result)
        {
            Assert.NotEqual(0, result.NumberOfSyntaxErrors);
        }
    }
}
